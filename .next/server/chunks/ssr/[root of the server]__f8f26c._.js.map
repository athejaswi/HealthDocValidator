{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///Users/aarushithejaswi/Documents/GitHub/ai-tax-clearance-verification/lib/textract.js"],"sourcesContent":["import { TextractClient, AnalyzeDocumentCommand } from \"@aws-sdk/client-textract\";\nimport { fromCognitoIdentityPool } from \"@aws-sdk/credential-providers\";\n\nconst textractClient = new TextractClient({\n  region: process.env.NEXT_PUBLIC_AWS_REGION,\n  credentials: fromCognitoIdentityPool({\n    identityPoolId: process.env.NEXT_PUBLIC_AWS_IDENTITY_POOL_ID,\n    clientConfig: { region: process.env.NEXT_PUBLIC_AWS_REGION },\n  }),\n});\n\nexport const analyzeDocumentFromBuffer = async (fileBuffer) => {\n  try {\n    const params = {\n      Document: {\n        Bytes: fileBuffer,\n      },\n      FeatureTypes: [\"FORMS\", \"TABLES\", \"SIGNATURES\"],\n    };\n\n    const command = new AnalyzeDocumentCommand(params);\n    const response = await textractClient.send(command);\n\n    return response;\n  } catch (error) {\n    console.error(\"Error analyzing document:\", error);\n    throw error;\n  }\n};"],"names":[],"mappings":";;;AAAA;AACA;AADA;;;AAGA,MAAM,iBAAiB,IAAI,kMAAA,CAAA,iBAAc,CAAC;IACxC,MAAM;IACN,aAAa,CAAA,GAAA,gMAAA,CAAA,0BAAuB,AAAD,EAAE;QACnC,cAAc;QACd,cAAc;YAAE,MAAM;QAAqC;IAC7D;AACF;AAEO,MAAM,4BAA4B,OAAO;IAC9C,IAAI;QACF,MAAM,SAAS;YACb,UAAU;gBACR,OAAO;YACT;YACA,cAAc;gBAAC;gBAAS;gBAAU;aAAa;QACjD;QAEA,MAAM,UAAU,IAAI,sNAAA,CAAA,yBAAsB,CAAC;QAC3C,MAAM,WAAW,MAAM,eAAe,IAAI,CAAC;QAE3C,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM;IACR;AACF"}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["file:///Users/aarushithejaswi/Documents/GitHub/ai-tax-clearance-verification/app/page.js"],"sourcesContent":["'use client';\n\nimport React, { useState, useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { analyzeDocumentFromBuffer } from \"../lib/textract\";\n\nexport default function Home() {\n  const [file, setFile] = useState(null);\n  const [missingFields, setMissingFields] = useState([]);\n  const [documentAccepted, setDocumentAccepted] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const onDrop = useCallback(async (acceptedFiles) => {\n    if (acceptedFiles.length === 0) return;\n\n    const uploadedFile = acceptedFiles[0];\n    setFile(uploadedFile);\n\n    const fileArrayBuffer = await uploadedFile.arrayBuffer();\n    const fileBuffer = new Uint8Array(fileArrayBuffer);\n\n    try {\n      setIsLoading(true);\n      const textractResult = await analyzeDocumentFromBuffer(fileBuffer);\n\n      const missing = checkForKeywords(textractResult);\n      setMissingFields(missing);\n      setDocumentAccepted(missing.length === 0);\n    } catch (error) {\n      console.error(\"Error processing document:\", error);\n      setMissingFields([\"Error analyzing document.\"]);\n      setDocumentAccepted(false);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'application/pdf': ['.pdf'],\n      'image/*': ['.png', '.jpg', '.jpeg']\n    },\n    multiple: false,\n  });\n\n  const checkForKeywords = (textractResult) => {\n    const missing = [];\n    const textBlocks = textractResult.Blocks.filter(block => block.BlockType === 'LINE');\n    const documentText = textBlocks.map(block => block.Text).join(\" \").toLowerCase();\n\n    // Check for keywords\n    const keywords = [\n      { keyword: \"State of New Jersey\", label: \"State of New Jersey\" },\n      { keyword: \"Clearance Certificate\", label: \"Clearance Certificate Keyword\" },\n      { keyword: \"Philip D. Murphy\", label: \"Governor's Name\" },\n    ];\n\n    keywords.forEach(({ keyword, label }) => {\n      if (!documentText.includes(keyword.toLowerCase())) {\n        missing.push(label);\n      }\n    });\n\n    // Check for signature\n    const hasSignature = checkForSignature(textractResult.Blocks);\n    if (!hasSignature) {\n      missing.push(\"Signature\");\n    }\n\n    // Check for date (must be within past 6 months)\n    const dateIsValid = checkForDate(documentText);\n    if (!dateIsValid) {\n      missing.push(\"Date must be within the last 6 months\");\n    }\n\n    return missing;\n  };\n\n  // Existing signature check\n  const checkForSignature = (blocks) => {\n    const signatureBlocks = blocks.filter(block => block.BlockType === 'SIGNATURE');\n    if (signatureBlocks.length > 0) return true;\n\n    const signatureEntities = blocks.filter(block => block.EntityTypes?.includes('SIGNATURE'));\n    if (signatureEntities.length > 0) return true;\n\n    const formFields = blocks.filter(block =>\n      block.BlockType === 'KEY_VALUE_SET' &&\n      block.EntityTypes?.includes('KEY')\n    );\n\n    const signatureField = formFields.some(field => {\n      const childBlocks = blocks.filter(block =>\n        field.Relationships?.some(rel =>\n          rel.Type === 'CHILD' && rel.Ids.includes(block.Id)\n        )\n      );\n\n      const fieldText = childBlocks\n        .map(block => block.Text?.toLowerCase() || '')\n        .join(' ');\n\n      return fieldText.includes('signature') || fieldText.includes('signed');\n    });\n\n    return signatureField;\n  };\n\n  // Date Checking Logic\n  const checkForDate = (documentText) => {\n    const datePattern = /(\\d{1,2}[/-]\\d{1,2}[/-]\\d{4})/g;\n    const matches = documentText.match(datePattern);\n\n    if (!matches || matches.length === 0) {\n      return false;\n    }\n\n    const dateStr = matches[0];\n    const normalized = dateStr.replace(/-/g, \"/\");\n    const parsedDate = new Date(normalized);\n\n    if (isNaN(parsedDate.getTime())) {\n      return false;\n    }\n\n    const now = new Date();\n    const sixMonthsAgo = new Date();\n    sixMonthsAgo.setMonth(now.getMonth() - 6);\n\n    return parsedDate >= sixMonthsAgo && parsedDate <= now;\n  };\n\n  return (\n    <div\n      className=\"container\"\n      style={{\n        maxWidth: \"800px\",\n        margin: \"2rem auto\",\n        padding: \"2rem\",\n        background: \"#fff\",\n        borderRadius: \"12px\",\n        boxShadow: \"0 6px 12px rgba(0, 0, 0, 0.1)\",\n        fontFamily: \"Arial, sans-serif\",\n      }}\n    >\n      <h1\n        style={{\n          fontSize: \"1.8rem\",\n          marginBottom: \"1.5rem\",\n          textAlign: \"center\",\n        }}\n      >\n        Tax Clearance Certificate Checker\n      </h1>\n\n      <div\n        {...getRootProps()}\n        className=\"dropzone\"\n        style={{\n          border: \"2px dashed #007bff\",\n          padding: \"30px\",\n          textAlign: \"center\",\n          borderRadius: \"8px\",\n          background: \"#f8f9fa\",\n          cursor: \"pointer\",\n        }}\n      >\n        <input {...getInputProps()} />\n        {isDragActive ? (\n          <p style={{ color: \"#007bff\" }}>Drop the file here...</p>\n        ) : (\n          <p>Drag & drop a file here, or click to select a file</p>\n        )}\n      </div>\n\n      {file && (\n        <p style={{ textAlign: \"center\", marginTop: \"1rem\", fontWeight: \"bold\" }}>\n          Uploaded File: {file.name}\n        </p>\n      )}\n\n      {/* Loading Indicator */}\n      {isLoading && (\n        <div style={{ textAlign: \"center\", marginTop: \"1rem\", fontWeight: \"bold\" }}>\n          Validating document...\n        </div>\n      )}\n\n      {/* Document Acceptance Notification */}\n      {documentAccepted && missingFields.length === 0 && (\n        <div style={{ marginTop: \"2rem\", backgroundColor: \"#d4edda\", padding: \"1rem\", borderRadius: \"6px\" }}>\n          <h2 style={{ fontSize: \"1.4rem\", color: \"#155724\" }}>Document Accepted!</h2>\n          <p style={{ color: \"#155724\" }}>\n            Your document has passed all checks and is deemed valid.\n          </p>\n        </div>\n      )}\n\n      {/* List any missing fields */}\n      {!documentAccepted && missingFields.length > 0 && (\n        <div style={{ marginTop: \"2rem\" }}>\n          {missingFields.length >= 4 && (\n            <div\n              style={{\n                textAlign: \"center\",\n                fontWeight: \"bold\",\n                marginBottom: \"1rem\",\n                backgroundColor: \"yellow\",\n                padding: \"0.5rem\",\n                borderRadius: \"4px\"\n              }}\n            >\n              ERROR: This document is likely NOT a tax clearance certificate\n            </div>\n          )}\n          <h2 style={{ fontSize: \"1.4rem\", color: \"#d9534f\" }}>Missing Fields:</h2>\n          <ul>\n            {missingFields.map((field, index) => {\n              if (field === \"Date must be within the last 6 months\") {\n                return (\n                  <li key={index} style={{ color: \"#d9534f\" }}>\n                    Date not provided or is not within the last 6 months\n                  </li>\n                );\n              }\n              return (\n                <li key={index} style={{ color: \"#d9534f\" }}>\n                  {field} is missing or invalid\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 463, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}